CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL UNIQUE,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    full_name VARCHAR(255),
    bio TEXT,
    profile_image_url VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE posts (
    post_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    image_url VARCHAR(255) NOT NULL,
    caption TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE comments (
    comment_id INT AUTO_INCREMENT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE likes (
    like_id INT AUTO_INCREMENT PRIMARY KEY,
    post_id INT,
    user_id INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE followers (
    follower_id INT AUTO_INCREMENT PRIMARY KEY,
    follower_user_id INT,
    following_user_id INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (follower_user_id) REFERENCES users(user_id),
    FOREIGN KEY (following_user_id) REFERENCES users(user_id),
    UNIQUE(follower_user_id, following_user_id)
);


SELECT columns
FROM table1
INNER JOIN table2 ON table1.column = table2.column;


SELECT users.username, posts.caption
FROM users
INNER JOIN posts ON users.user_id = posts.user_id;

SELECT columns
FROM table1
LEFT JOIN table2 ON table1.column = table2.column;

SELECT users.username, posts.caption
FROM users
LEFT JOIN posts ON users.user_id = posts.user_id;

SELECT columns
FROM table1
RIGHT JOIN table2 ON table1.column = table2.column;

SELECT users.username, posts.caption
FROM users
RIGHT JOIN posts ON users.user_id = posts.user_id;

SELECT users.username, posts.caption
FROM users
LEFT JOIN posts ON users.user_id = posts.user_id
UNION
SELECT users.username, posts.caption
FROM users
RIGHT JOIN posts ON users.user_id = posts.user_id
WHERE users.user_id IS NULL;

SELECT u.username, p.caption
FROM users u
INNER JOIN posts p ON u.user_id = p.user_id;



SYNTAX
DDL
CREATE DATABASE dbname;
CREATE TABLE tablename (
    column1 datatype constraints,
    column2 datatype constraints,
    ...
);
ALTER TABLE tablename ADD columnname datatype constraints;
DROP TABLE tablename;
CREATE INDEX indexname ON tablename (columnname);

DML 
INSERT INTO tablename (column1, column2, ...) VALUES (value1, value2, ...);
UPDATE tablename SET column1 = value1 WHERE condition;
DELETE FROM tablename WHERE condition;

DQL
SELECT columns FROM tablename WHERE condition;
SELECT columns
FROM table1
INNER JOIN table2 ON table1.column = table2.column;

DCL
GRANT SELECT, INSERT, UPDATE ON dbname.tablename TO 'username'@'hostname';
REVOKE SELECT ON dbname.tablename FROM 'username'@'hostname';

TCL
START TRANSACTION;
COMMIT;
ROLLBACK;


CREATE TABLE user (
id INT NOT NULL UNIQUE,
name VARCHAR(100) NOT NULL,
age INT NOT NULL,
email VARCHAR(50) NOT NULL UNIQUE,
follower INT NOT NULL default 0,
following INT NOT NULL default 0,
CONSTRAINT age_check CHECK(age > 13),
PRIMARY KEY(id)
);

INSERT INTO user 
VALUES
(1, "Taimoor", 23, "taimoorhussain985@gmail.com", 1000, 03),
(2, "Ghayoor", 23, "ghayoorhussain985@gmail.com", 1590, 00),
(3, "Hussain", 23, "hussain985@gmail.com", 50, 100),
(4, "Ali", 23, "ali985@gmail.com", 200, 30),
(5, "Aslam", 23, "aslam@gmail.com", 10, 500);


select name from user where follower > 50;

show tables;


Operator 
select name,age,follower from user
where 
age > 15 OR follower>200 ;
-- AND 
select name,age,follower from user
where 
age > 15 AND follower>200 ;

-- BETWEEN
select name,age,follower from user
where 
age > 15 BETWEEN 15 AND 17;

-- IN
select name, follower from user
where
name in ("Taimoor", "Hussain", "Amjad", "Ghayoor");

select name, follower from user
where
age IN (19, 22);

-- NOT
select name, follower from user
where
age NOT IN (19, 22);

-- LIMIT
Select * from user LIMIT 3;

-- ORDER BY
SELECT * FROM user ORDER BY name desc;

-- AGREGATE FUNCTIONS
-- MAX
select max(follower) AS MAX_FOLLOWERS  from user;
--  MIN
select min(follower) AS MAX_FOLLOWERS  from user;
-- COUNT 
select count(id) as TOTAL_USER from user;
select count(age) from user where age > 23;
-- AVERAGE
select avg(age) as AVERAGE_AGE from user;
-- SUM
select sum(follower) as TOTAL_FOLLOWER from user;

-- GROUP BY
select age, count(id) from user
group by age;

select age, max(follower) from user 
group by age;

-- Having Clause
select age, max(follower) from user 
group by age
having max(follower) > 200;


-- GENERAL ORDER
-- SELECT column(s)
-- FROM table_name
-- where condition
-- group by columns
-- having condition
-- order by columns


-- UPDATE ROWS
UPDATE user 
SET FOLLOWER = 600
where age = 23;

SET SQL_SAFE_UPDATES= 0;

select name, follower, age from user where age = 23;

-- DELETE
DELETE FROM user
where age = 20;

-- ALTER
Alter table user
Add column city varchar(40) default "Lahore";

ALTER TABLE user
DROP COLUMN city;

ALTER TABLE user
RENAME TO users;

ALTER TABLE users 
CHANGE COLUMN follower subscribers INT DEFAULT 0;

ALTER TABLE users
MODIFY email VARCHAR(40);

show tables;
TRUNCATE table post;
select *from post;




